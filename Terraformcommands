#to check the terraform version
terraform --version

#To run the terraform script
#steps
init --> initialization                                 --> terrafrom init
plan --> plan  (how your automation looks like)         --> 
apply --> apply  (execute script)                       -->


#Terraform providers
Available in Terraform registry

https://registry.terraform.io/


## Terraform Meta-Arguments

### `depends_on`
- Ensure a resource is created after another resource:
    ```hcl
    resource "aws_instance" "example" {
      depends_on = [aws_security_group.example]
      # other arguments
    }
    ```

### `count`
- Create multiple instances of a resource:
    ```hcl
    resource "aws_instance" "example" {
      count = 3
      # other arguments
    }
    ```

### `for_each`
- Create resources from a map or set of strings:
    ```hcl
    resource "aws_instance" "example" {
      for_each = var.instances
      # other arguments
    }
    ```

### `lifecycle`
- Customize resource lifecycle behavior:
    ```hcl
    resource "aws_instance" "example" {
      lifecycle {
        create_before_destroy = true
        prevent_destroy = true
      }
      # other arguments
    }
    ```

### `provider`
- Specify which provider configuration to use:
    ```hcl
    resource "aws_instance" "example" {
      provider = aws.west
      # other arguments
    }
    ```




#Additional Terraform Commands

## Format and validate configuration
- Format the configuration files:
    ```sh
    terraform fmt
    ```
- Validate the configuration files:
    ```sh
    terraform validate
    ```

## Manage Terraform state
- Show the current state:
    ```sh
    terraform show
    ```
- List resources in the state:
    ```sh
    terraform state list
    ```
- Remove a resource from the state:
    ```sh
    terraform state rm <resource>
    ```

## Destroy infrastructure
- Destroy the infrastructure managed by Terraform:
    ```sh
    terraform destroy
    ```

## Output values
- Show output values from the state file:
    ```sh
    terraform output
    ```

## Workspaces
- List all workspaces:
    ```sh
    terraform workspace list
    ```
- Create a new workspace:
    ```sh
    terraform workspace new <workspace_name>
    ```
- Select a workspace:
    ```sh
    terraform workspace select <workspace_name>
    ```
- Delete a workspace:
    ```sh
    terraform workspace delete <workspace_name>
    ```

  